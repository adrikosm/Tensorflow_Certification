# -*- coding: utf-8 -*-
"""transfer_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UzvNhdidzALl6II2X9yCkObdK7GlWSYQ

# Transfer Learning with tensorflow:
## Part 1 Feature Extraction


---

The main benefits of using transfer learning:
1. Can leverage existing neural networks that have been proven to work 
2. Can leverage a working neural network architecture which has already learned patterns with similar data to our own.

### Imports
"""

import numpy as np
import pandas as pd

import matplotlib.image as mpimg
import matplotlib.pyplot as plt


import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator


import pathlib
import zipfile
import os
import random
import datetime

"""### Download data"""

# Download 10 percent of the 10 food classes dataset
!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip

# Unzip downloaded data
zip_ref = zipfile.ZipFile('10_food_classes_10_percent.zip')
zip_ref.extractall()
zip_ref.close()

# How many images are there in each folder
for dirpath,dirnames, filenames in os.walk('/content/10_food_classes_10_percent'):
  if len(dirnames) == 0:
    print(f"There are {len(filenames)} images in {dirpath} ")
  else:
    print(f"There are {len(dirnames)} directories in {dirpath}")

# Get the subdirectories (class_names)
data_dir = pathlib.Path('10_food_classes_10_percent/train')
class_names = np.array(sorted(item.name for item in data_dir.glob("*")))
print(class_names)

# Function to view random images
def view_random_image(target_dir,target_class):
  """
  Gets a random image from a selected directory and calss
  """
  target_folder = target_dir + "/" + target_class
  random_image = random.sample(os.listdir(target_folder),1)

  # Plot out the image
  img = mpimg.imread(target_folder + "/" + random_image[0])
  plt.imshow(img)
  plt.title(target_class)
  plt.axis("off")
  print(f"Image shape: {img.shape}")
  
  return img

# Plot a random image for each class
def view_images(target_dir):
  """
  Plots a random image from each class
  """
  plt.figure(figsize=(15,15))
  for i in range(len(class_names)):
    plt.subplot(5,5,i+1)
    target_folder = target_dir + "/" + class_names[i]
    random_image = random.sample(os.listdir(target_folder),1)
    img = mpimg.imread(target_folder + "/" + random_image[0])
    plt.imshow(img)
    plt.axis("off")
    img_info = class_names[i] + "\n" + str(img.shape)
    plt.title(img_info)

img = view_random_image(target_dir = '10_food_classes_10_percent/test',
                        target_class = 'sushi')

view_images(target_dir = "10_food_classes_10_percent/train")

"""## Creating data loaders (preparing the data)
we will prepare the data using tf keras ImageDataGenerator
"""

# Setup global variables
IMAGE_SHAPE = (224,224)
BATCH_SIZE = 32
EPOCHS = 5




# Setup data
train_dir = "10_food_classes_10_percent/train/"
test_dir = "10_food_classes_10_percent/test/"

train_datagen = ImageDataGenerator(rescale = 1/255.)
test_datagen = ImageDataGenerator(rescale = 1/255.)

train_data_10_percent = train_datagen.flow_from_directory(train_dir,
                                                          target_size = IMAGE_SHAPE,
                                                          batch_size = BATCH_SIZE,
                                                          class_mode = "categorical")


test_data_10_percent = test_datagen.flow_from_directory(test_dir,
                                                        target_size = IMAGE_SHAPE,
                                                        batch_size = BATCH_SIZE,
                                                        class_mode = "categorical")

"""## Setting up callbacks
Call can be used for
* Tracking experiments with tensorboard
* Model checkpoint
* Stopping a model from overtraining

"""

# Create tensorboard callback 
# We wil make it into a function in order to use it for multiple models

def create_tensorboard_callback(dir_name,experiment_name):
  """
  """
  log_dir = dir_name + "/" + experiment_name + "/" + datetime.datetime.now.strftime("%Y%m%d-%H%M%S")
  tensorboard_callback = tf.keras.callbacks.TensorBoard
  print(f"Saving Tensorboard log files to : {log_dir}")
  return tensorboard_callback

